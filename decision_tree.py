# -*- coding: utf-8 -*-
"""decision tree

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/b02203054/5e961d5654819879485ae6f0673c940a/decision-tree.ipynb
"""

from google.colab import drive
drive.mount('/content/drive/')

#basically import everything

import numpy as np 
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
import numpy as np
import pandas as pd
from sklearn.model_selection import GridSearchCV
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import f1_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, make_scorer
from sklearn.model_selection import train_test_split
from sklearn import tree
import graphviz
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from keras.initializers import glorot_uniform
import keras
from keras.models import Sequential
from keras.layers import Dense
from sklearn.metrics import confusion_matrix
import os
os.chdir('/content/drive/My Drive/In OU study time/OU lectures/MIT5970/')

# load the data 
my_data = pd.read_csv("/content/drive/My Drive/In OU study time/OU lectures/MIT5970/machine_learning_project_KNN_model/UCICreditCardplus.csv", delimiter=",")
my_data[0:5]

# set up the variables and target
X = my_data[['LIMIT_BAL','SEX',
             'EDUCATION',
             'MARRIAGE',
             'AGE',
             'PAY_0',
             'PAY_2',
             'PAY_3',
             'PAY_4',
             'PAY_5',
             'PAY_6',
             'BILL_AMT1',
             'BILL_AMT2',
             'BILL_AMT3',
             'BILL_AMT4',
             'BILL_AMT5',
             'BILL_AMT6',
             'PAY_AMT1',
             'PAY_AMT2',
             'PAY_AMT3',
             'PAY_AMT4',
             'PAY_AMT5',
             'PAY_AMT6']].values

y = my_data["default payment next month"]

# split the data into training group and test group
X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)
print(np.shape(X_testset))

#set up the depth we want to achieve, since it's a decision "tree"
CreditcardTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4)

# it shows the default parameters
CreditcardTree

#finally fit the data into the model
CreditcardTree.fit(X_trainset,y_trainset)

# make the prediction
PredTree = CreditcardTree.predict(X_testset)

# compared with prediction and actual datasets to understand how accurate the model is
# formula of "accuracy" : # of correctly predict datasets in testset / total # datasets in testset 
from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_testset, PredTree))

# Commented out IPython magic to ensure Python compatibility.
# import more things 
from sklearn.externals.six import StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree
# %matplotlib inline

# visualize the model 
dot_data = StringIO()
filename = "Predtree.png"
featureNames = my_data.columns[1:24]
targetNames = my_data["default payment next month"].unique().tolist()
out=tree.export_graphviz(CreditcardTree,feature_names=featureNames, out_file=dot_data, class_names= np.unique(y_trainset), filled=True,  special_characters=True,rotate=False)  
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png(filename)
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200))
plt.imshow(img,interpolation='nearest')

re_data = pd.read_csv("/content/drive/My Drive/MIT5970/machine_learning_project_KNN_model/UCI_Credit_Card.csv", delimiter=",")
re_data = re_data.drop(columns=['ID'])
re_data[0:5]

from sklearn import linear_model
regr = linear_model.LinearRegression()
x = np.asanyarray(re_data[[
             'LIMIT_BAL','SEX',
             'EDUCATION',
             'MARRIAGE',
             'AGE',
             'PAY_0',
             'PAY_2',
             'PAY_3',
             'PAY_4',
             'PAY_5',
             'PAY_6',
             'BILL_AMT1',
             'BILL_AMT2',
             'BILL_AMT3',
             'BILL_AMT4',
             'BILL_AMT5',
             'BILL_AMT6',
             'PAY_AMT1',
             'PAY_AMT2',
             'PAY_AMT3',
             'PAY_AMT4',
             'PAY_AMT5',
             'PAY_AMT6']])
y = np.asanyarray(re_data[["default.payment.next.month"]])
regr.fit (x, y)

print ('Coefficients: ', regr.coef_)
regr.score(x, y)

orig_list = [1, 2, 3, -1, -2]
print (orig_list)
for item in orig_list: 
    print(item * item)

